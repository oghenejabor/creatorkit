'use server';

/**
 * @fileOverview A Genkit flow for generating ASO for Google Play Store apps.
 *
 * - generateAso - A function that generates keywords, an app title, short description, and long description.
 * - GenerateAsoInput - The input type for the generateAso function.
 * - GenerateAsoOutput - The return type for the generateAso function.
 */

import { ai } from '@/lib/genkit-service';
import { z } from 'zod';
import Handlebars from 'handlebars';
import { getPrompt } from '@/lib/prompt-service';
import { getModelConfig } from '@/lib/model-config-service';

const GenerateAsoInputSchema = z.object({
  appName: z.string().describe('The name of the Google Play Store app.'),
  appDescription: z.string().describe('A summary of what the app does, its main features, and target audience.'),
  appCategory: z
    .string()
    .describe('The category of the app (e.g., "Games", "Productivity", "Social").'),
  isAffiliateApp: z
    .boolean()
    .describe('Set to true if the app is primarily for affiliate marketing.'),
});
export type GenerateAsoInput = z.infer<typeof GenerateAsoInputSchema>;

const GenerateAsoOutputSchema = z.object({
  generatedKeywords: z
    .array(z.string())
    .describe('A list of 5-10 relevant keywords generated by the AI.'),
  title: z
    .string()
    .describe('A 30-character app title that includes a primary keyword.'),
  shortDescription: z
    .string()
    .describe(
      'An 80-character short description with a hook and a keyword.'
    ),
  longDescription: z
    .string()
    .describe(
      'A full 4000-character, engaging, and keyword-rich long description.'
    ),
});
export type GenerateAsoOutput = z.infer<typeof GenerateAsoOutputSchema>;


export async function generateAso(
  input: GenerateAsoInput
): Promise<GenerateAsoOutput> {
  const generateAsoFlow = ai.defineFlow(
    {
      name: 'generateAsoFlow',
      inputSchema: GenerateAsoInputSchema,
      outputSchema: GenerateAsoOutputSchema,
    },
    async (input) => {
      const [promptTemplate, modelConfig] = await Promise.all([
          getPrompt('generateAso'),
          getModelConfig('generateAso')
      ]);
      
      const template = Handlebars.compile(promptTemplate);
      const filledPrompt = template(input);
      
      const generate = await ai.getGenerator(modelConfig.model);
      const { output } = await generate({
        prompt: filledPrompt,
        output: { schema: GenerateAsoOutputSchema },
      });

      if (!output) {
        throw new Error('AI failed to generate ASO content.');
      }
      
      return output;
    }
  );
  return generateAsoFlow(input);
}
